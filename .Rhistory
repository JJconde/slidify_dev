exp(cbind(coef(logAuto2), confint(logAuto2)))
logAuto <- glm(use ~ wind, data=shuttle, family="binomial")
summary(logAuto)$coef
exp(cbind(coef(logAuto), confint(logAuto)))
plot(shuttle$wind, logAuto$fitted,
pch=19, col="blue")
summary(logAuto)$coef
coef(logAuto2)
contrasts(as.factor(shuttle$wind))
shuttle$wind <- relevel(shuttle$wind, ref="head")
logAuto <- glm(use ~ wind, data=shuttle, family="binomial")
summary(logAuto)$coef
plot(shuttle$wind, logAuto$fitted,
pch=19, col="blue")
# Estimated odds ratio
exp(cbind(coef(logAuto), confint(logAuto)))
shuttle$use <- relevel(shuttle$use, ref="noauto")
shuttle$wind <- relevel(shuttle$wind, ref="head")
logAuto <- glm(use ~ wind, data=shuttle, family="binomial")
summary(logAuto)$coef
plot(shuttle$wind, logAuto$fitted,
pch=19, col="blue")
# Estimated odds ratio
exp(cbind(coef(logAuto), confint(logAuto)))
contrasts(as.factor(shuttle$wind))
shuttle$wind <- relevel(shuttle$wind, ref="tail")
logAuto <- glm(use ~ wind, data=shuttle, family="binomial")
summary(logAuto)$coef
plot(shuttle$wind, logAuto$fitted,
pch=19, col="blue")
# Estimated odds ratio
exp(cbind(coef(logAuto), confint(logAuto)))
logAuto2 <- glm(use ~ wind + magn, data=shuttle, family="binomial")
exp(cbind(coef(logAuto2), confint(logAuto2)))
plot(shuttle$wind, logAuto$fitted,
pch=19, col="blue")
plot(shuttle$wind, exp(logAuto$fitted),
pch=19, col="blue")
# Estimated odds ratio
plot(shuttle$wind, logAuto$fitted,
pch=19, col="blue")
plot(shuttle$wind, exp(logAuto$fitted),
pch=19, col="blue")
plot(shuttle$wind, logAuto$fitted,
)
exp(1.33)/ (1+exp(1.33))
exp(1.33)/ (1+exp(1.33 + 0.969))
contrasts(as.factor(shuttle$wind))
summary(logAuto)$coef
exp(0.283)/ (1+exp(0.283 + 0.969))
exp(0.283)/ (1+exp(0.283))
exp(0.283)/ (1+exp(0.283 + -0.0318))
exp(0.283 - 0.0318)/ (1+exp(0.283 - 0.0318))
exp(cbind(coef(logAuto), confint(logAuto)))
exp(0.283)
1.327 / (1 + 1.327)
(1.327 * 0.969) / (1 + 1.327 * 0.969)
data(shuttle)
shuttle$wind <- relevel(shuttle$wind, ref="tail")
logAuto <- glm(use ~ wind, data=shuttle, family="binomial")
exp(cbind(coef(logAuto), confint(logAuto)))
data(InsectSprays)
InsectSprays
glmInsect <- glm(count ~ spray, data=InsectSprays,
family="poisson", data=gaData)
InsectSprays$spray <- InsectSprays$spray
glmInsect <- glm(count ~ A + B, data=InsectSprays,
family="poisson", data=gaData)
glmInsect <- glm(count ~ sprayA + sprayB, data=InsectSprays,
family="poisson", data=gaData)
rm(list=ls())
data(InsectSprays)
summary(InsectSprays)
str(InsectSprays)
InsectSprays$spray <- relevel(InsectSprays$spray, ref="B")
str(InsectSprays)
glmInsect <- glm(count ~ spray=="B" + spray=="A" -1, data=InsectSprays,
family="poisson", data=gaData)
glmInsect <- glm(count ~ ., data=InsectSprays,
family="poisson", data=gaData)
InsectSprays$A <- InsectSprays$spray[InsectSprays$spray=="A"]
InsectSprays$A
head(InsectSprays)
tail(InsectSprays)
InsectSprays$A <- InsectSprays[InsectSprays$spray=="A", "spray"]
tail(InsectSprays)
InsectSprays$spray=="A"
InsectSprays$A <- InsectSprays$spray=="A" * 1
InsectSprays$A <- InsectSprays$spray=="A"
tail(InsectSprays)
InsectSprays$A <- (InsectSprays$spray=="A") * 1
InsectSprays$B <- (InsectSprays$spray=="B") * 1
glmInsect <- glm(count ~ A - 1, offset=log(B+1), data=InsectSprays,
family="poisson", data=gaData)
glmInsect <- glm(count ~ A, offset=log(B+1), data=InsectSprays,
family="poisson", data=gaData)
glmInsect <- glm(count ~ A - 1, offset=log(B+1), data=InsectSprays,
family="poisson"", data=gaData")
glmInsect <- glm(count ~ A - 1, offset=log(B+1), data=InsectSprays,
family="poisson")
summary(glmInsect)$coef
glmInsect <- glm(count ~ A, offset=log(B+1), data=InsectSprays,
family="poisson")
summary(glmInsect)$coef
plot(InsectSprays$A, InsectSprays$count / (InsectSprays$B + 1), col="grey")
line(InsectSprays$A, glmInsect$fitted / (InsectSprays$B + 1), col="blue")
lines(InsectSprays$A, glmInsect$fitted / (InsectSprays$B + 1), col="blue")
plot(InsectSprays$A, glmInsect, col="grey", pch=19)
plot(InsectSprays$A, glmInsect$fitted, col="grey", pch=19)
summary(glmInsect)$coef
data(InsectSprays)
InsectSprays$spray <- relevel(InsectSprays$spray, ref="B")
glmbase <- glm(count ~ spray, data=InsectSprays, family="poisson")
glmbase
summary(glmbase)$coef
exp(summary(glmbase)$coef)
exp(coef(glmbase))
glmbase <- glm(count ~ spray - 1, data=InsectSprays, family="poisson")
exp(coef(glmbase))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
fit <- lm(y ~ xMat - 1)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(fit)
coef(fit)
2.0372-1.024
data(shuttle)
logAuto <- glm(use ~ wind, data=shuttle, family="binomial")
summary(logAuto)$coef
shuttle$use <- relevel(shuttle$use, ref="noauto")
logAuto <- glm(use ~ wind, data=shuttle, family="binomial")
summary(logAuto)$coef
shuttle$wind <- relevel(shuttle$wind, ref="tail")
logAuto <- glm(use ~ wind, data=shuttle, family="binomial")
summary(logAuto)$coef
exp(cbind(coef(logAuto), confint(logAuto)))
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/cameras.csv")
cameraData <- read.csv("./data/cameras.csv")
names(cameraData)
tolower(names(cameraData))
splitNames = strsplit(names(cameraData), "\\.")
splitNames
splitNames[[6]]
splitNames[[6]][1]
e - lists
mylist <- list(letters=c("A", "b", "c"), numbers=1:3, matrix(1:25, ncol=5))
head(mylist)
mylist[1]
mylist[[2]]
mylist$letters
# Fixing character vectors - sapply()
firstElement <- function(x){x[1]}
sapply(splitNames, firstElement)
fileUrl1 <- "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <- "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1, destfile="./data/reviews.csv")
download.file(fileUrl2, destfile="./data/solutions.csv")
reviews <- read.csv("./data/reviews.csv")
solutions <- read.csv("./data/solutions.csv")
head(reviews, 2)
head(reviews, 2); head(solutions, 2)
names(reviews)
sub("_", "", names(reviews), )
testName <- "this_is_a_test"
gsub("_", "", testName)
grep("Alameda", camearData$intersection)
grep("Alameda", cameraData$intersection)
table(grepl("Alameda", cameraData$intersection))
cameraData2 <- cameraData[!grepl("Alameda", cameraData$intersection), ]
?exact
?same
head(cameraData2)
cameraData2 <- cameraData[grepl("Alameda", cameraData$intersection), ]
head(cameraData, 5)
head(cameraData2, 5)
grep("Alameda", cameraData$itnersection, value=TRUE)
length(grep("Do not exist", cameraData$intersection))
library(stringr)
nchar("Jeffrey Leek")
length("Jeffrey Leek")
substr("Jeffrey Leek", 1, 7)
paste("Jeffrey", "Leek")
paste("Jeffrey", "Leek"); paste0("Jeffrey", "Leek")
str_trim("Jeff    ")
str_trim("  Jeff  ")
class(cameraData)
is(cameraData)
is(date())
is(Sys.date())
is(Sys.Date())
d2 = date()
format(d2, "%a %b %d")
d2 = Sys.Date()
format(d2, "%a %b %d")
x = c("1jan1960", 2"jan1960", "30jul1960"); z =as.Date(x, "%d%b%Y")
x = c("1jan1960", 2"jan1960", "30jul1960")); z=as.Date(x, "%d%b%Y")
x = c("1jan1960", "2jan1960", "30jul1960")); z=as.Date(x, "%d%b%Y")
x = c("1jan1960", "2jan1960", "30jul1960"); z=as.Date(x, "%d%b%Y")
z[1]
a.numeric(z[3] - z[1])
x = c("1jan1960", "2jan1960", "30jul1960"); z=as.Date(x, "%d%b%Y")
z[1]
as.numeric(z[3] - z[1])
z[1]; z[3] - z[1]
weekdays(d2)
months(d2)
julian(d2)
library(lubridate); ymd("20140108")
rm(list=ls())
ymd_hms("2011-08-03 10:15:03")
ymd_hms("2011-08-03 10:15:03", tz="Pacific/Asia")
ymd_hms("2011-08-03 10:15:03", tz="Pacific/Auckland")
weekdays(d2)
d2 = Sys.Date()
weekdays(d2)
x = c("1jan1960", "2jan1960", "30jul1960"); z=as.Date(x, "%d%b%Y")
wday(x[1], label=TRUE)
wday(dmy(x[1]), label=TRUE)
download.file(file="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="./data/")
download.file(file="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="./data/getdata-data-ss06hid.csv")
usc <- read.csv("./data/getdata-data-ss06hid.csv")
splitNames = strsplit(names(usc), "\\wgtp")
splitNames[123]
splitNames
splitNames[123]
splitNames[[123]]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="./data/getdata-data-GDP.csv")
rm(usc)
rm(list=ls())
GDP <- read.csv("./data/getdata-data-GDP.csv")
head(GDP)
str(GDP)
newGDP <- GDP[5:, 5]
newGDP <- GDP[5:nrow(GDP), 5]
newGDP <- as.numeric(newGDP)
newGDP
newGDP <- GDP[5:nrow(GDP), 5]
newGDP
newGDP <- gusb(",", "", newGDP)
newGDP <- gsub(",", "", newGDP)
mean(as.numeric(newGDP))
mean(as.numeric(newGDP), na.rm=TRUE)
newGDP <- gsub(",", "", newGDP)
tail(newGDP)
newGDP
as.numeric(newGDP)
mean(as.numeric(newGDP), na.rm=TRUE)
sum(as.numeric(newGDP), na.rm=TRUE)
sum(as.numeric(newGDP), na.rm=TRUE) / nrow(newGDP)
296556885 / nrow(newGDP)
nrow(newGDP)
length(newGDP)
296556885 / 326
newGDP <- GDP[1:190]
newGDP <- GDP[1:190, ]
newGDP <- gsub(",", "", newGDP)
mean(newGDP)
newGDP
newGDP <- GDP[5:nrow(GDP), 5]
newGDP <- newGDP[1:190, ]
newGDP <- gsub(",", "", newGDP)
newGDP <- newGDP[1:190]
newGDP <- gsub(",", "", newGDP)
mean(newGDP)
mean(as.numeric(newGDP))
str(GDP)
grep("United$",countryNames), 3
GDP[grep("^United",countryNames), 3]
GDP[grep("^United", GDP), 3]
GDP[grep("^United", GDP[, 3]), 3]
grep("^United", GDP[, 3])
GDP[grep("^United", GDP$X.2), 3]
grep("^United", GDP$X.2)
GDP[5, 3]
GDP[grep("^United", GDP$X.2), 2]
GDP[grep("^United", GDP[, 4]), 4]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
ed <- read.csv("./data/getdata-data-EDSTATS_Country.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="./data/getdata-data-EDSTATS_Country.csv")
ed <- read.csv("./data/getdata-data-EDSTATS_Country.csv")
head(ed)
ed[,1]
GDP[, 1]
newGDP <- GDP[5:194, ]
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(amzn)
sampleTimes
library(lubridate)
sum(year(ymd(sampleTimes))==2012)
day(date())
date()
Sys.Date()
day(ymd(Sys.Date()))
wday(ymd(Sys.Date()))
sum(year(ymd(sampleTimes))==2012 & wday(ymd(sampleTimes))==4)
head(newGDP)
head(ed)
tail(newGDP)
head(ed$Special.Notes, 50)
newed <- subset(ed, select=c("CountryCode", "Special.Notes"))
head(newed)
head(newGDP)
names(newGDP[, 1]) <- "CountryCode"
merge(newGDP, newed, by="CountryCode")
head(newGDP)
names(newGDP)
names(newGDP)[1]
names(newGDP)[1] <- "CountryCode"
merge(newGDP, newed, by="CountryCode")
combData <- merge(newGDP, newed, by="CountryCode")
combData
head(combData)
fiscalJune <- grep("[Ff]iscal", combData$Special.Notes)
head(fiscalJune)
fiscalJune <- grep("[Ff]iscal", combData$Special.Notes, value=TRUE)
head(fiscalJune)
fiscalJune
fiscalJune <- grep("[Ff]iscal | [jJ]une", combData$Special.Notes, value=TRUE)
fiscalJune
fiscalJune <- grep("[Ff]iscal & [jJ]une", combData$Special.Notes, value=TRUE)
fiscalJune
fiscalJune <- grep("[Ff]iscal + (*) + [jJ]une", combData$Special.Notes, value=TRUE)
fiscalJune
fiscalJune <- grep("[Ff]iscal+ (.*)[jJ]une+", combData$Special.Notes, value=TRUE)
fiscalJune
length(fiscalJune)
GDP[grep("^United", GDP[, 4]), 4]
sum(year(ymd(sampleTimes))==2012 & wday(ymd(sampleTimes))==2)
ans <- GDP[grep("^United", GDP[, 4]), 4]
ans; length(ans)
rm(list=ls())
?std
x <- c(1, 5, 9)
sd(x)
x / sd(x)
x <- matrix(x)
y <- 2*x
y - x
rm(list=ls())
A = [c(1, 2, 3), c(4, 5, 6), c(7, 8, 9)]
A = matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)
mean(A)
matrix
A
mean(A[, 1])
theta = 1
e = 0.01
((theta + e)^3 - (theta - e)^3) / (2 * e)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s=slider(0, 2, step=0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
fit <- lm(I(cars$dist-mean(cars$dist)) ~ I(cars$speed - mean(cars$speed)))
abline(fit, col="red")
abline(0, s)
}
manipulate(myPlot(s), s=slider(0, 2, step=0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
fit <- lm(I(cars$dist-mean(cars$dist)) ~ I(cars$speed - mean(cars$speed)))
abline(0, fit, col="red")
abline(0, s)
}
manipulate(myPlot(s), s=slider(0, 2, step=0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
fit <- lm(I(cars$dist-mean(cars$dist)) ~ I(cars$speed - mean(cars$speed)))
line(fit, col="red")
abline(0, s)
}
manipulate(myPlot(s), s=slider(0, 2, step=0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
fit <- lm(I(cars$dist-mean(cars$dist)) ~ I(cars$speed - mean(cars$speed)))
line(fit)
abline(0, s)
}
manipulate(myPlot(s), s=slider(0, 2, step=0.1))
manipulate(myPlot(s), slider(0, 2, step=0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider(0, 2, step=0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider=(0, 2, step=0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s=slider=(0, 2, step=0.1))
library(rCharts)
data(airquality)
dt <- dTable(airquality, sPaginationType="full_numbers")
head(dt)
?dTable
??dTable
shiny::runApp('Galton Graph')
shiny::runApp('Galton Graph')
class(rnorm(100))
ls
dir()
install.packages("fields")
?data.matrix
install.packages("yhatr")
?colSums
?predict
?dgamma
?lm
?getMethods
getMethods("mean")
getMethods(mean)
head(getS3method("mean", "default"), 10)
getS3method("mean", "default")
?model.predict
library(reshape2)
head(iris)
install.packages("DDPQuiz3")
getMethod("createmean")
getMethod("createmean", "default")
?colSums
x <- 1:10
colSums(x)
df <- cbind(x, x)
df
names(df)[2] <- "y"
df
names(df)[2] <- NULL
names(df)[2] <- NA
df
colSums(df)
lm(df[,2] ~ df[, 1])
?lm
fit <- lm(df[,2] ~ df[, 1])
predict(fit, 1)
?predict
class(fit)
predict(fit, x)
??predict
rm(list=ls())
library(rCharts)
open_notebook()
open_notebook()
## R Notebook and rCharts
## R Notebook and rCharts
This is a short demo on how to embed d3js style charts in an R Markdown notebook, using rCharts and Shiny. If you want to follow along, please install `rCharts` from `github` using `devtools` and run `open_notebook()`.
```{r eval = F}
require(devtools)
install_github('rCharts', 'ramnathv')
open_notebook()
head(economics)
rm(list=ls())
shiny::runApp('Hello Shiny')
rnExample("01_hello")
runExample("01_hello")
runExample("02_text")
runExample("02_text")
runExample("03_reactivity")
runExample("05_sliders")
runExample("06_tabsets")
library(shiny)
library(maps)
library(mapproj)
install.packages("mapproj")
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
percent_map(counties$white, "darkgreen", "% white")
shiny::runApp('census-app')
head(counties, 5)
runExample("06_tabsets")
shiny::runApp('census-app')
shiny::runApp('census-app')
shiny::runApp('census-app')
runExample("06_tabsets")
shiny::runApp('census-app')
runExample("06_tabsets")
runExample("02_text")
shiny::runApp('census-app')
shiny::runApp('census-app')
shiny::runApp('census-app')
shiny::runApp('census-app')
shiny::runApp('census-app')
library(slidify)
setwd("./census-app/census_app")
publish(user='jjconde', repo='slidify_dev')
